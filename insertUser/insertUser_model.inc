<?php
/**
 * =====================================================================================
	プログラム名  ：	勤怠管理システム（Web版）
 	プログラム説明：社員の勤怠情報を管理するシステムです。
 				管理者はカレンダーを使用して視覚的に勤怠の登録、削除、変更
 				を行えるほか各社員の勤怠情報の閲覧、休日、休憩時間の設定
 				機能を使用することができます。

 				勤怠情報とカレンダー部分はPDF,EXCEL出力することが可能です。
 	作成者        ：	水島創太
 	作成日        ：	2015/8/26
	=====================================================================================
 */

class insertUser_model{

	//-----------------------------------------
	//各プロパティ変数宣言
	//-----------------------------------------

	private $userid;		//ユーザーID
	private $password;		//パスワード
	private $checkPass;		//確認用パスワード
	private $authority;		//権限(1:一般 2:管理者)
	private $name;			//名前
	private $phone;			//電話番号
	private $email;			//Eメール
	private $positionid;	//役割管理用ID
	private $colorid;		//表示色管理用ID
	private $execute;		//処理種別

	/*====================================================================================
	 *概要：
	 *	insertUser_form
	 *機能説明：
	 *	コンストラクタ
	 *引数：
	 *	なし
	 *戻り値：
	 *	なし
	 *備考：
	 *	作成日)	2015/8/26
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

	function __construct(){

		$this->init();

	}

	/*====================================================================================
	 *概要：
	 *	init
	 *機能説明：
	 *	プロパティ初期化
	 *引数：
	 *	なし
	 *戻り値：
	 *	なし
	 *備考：
	 *	作成日)	2015/8/26
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

 	private function init(){

	$this->userid = "";			//ユーザーID
	$this->password = "";		//パスワード
	$this->checkPass = "";		//確認用パスワード
	$this->authority = "1";		//権限(1:一般 2:管理者)
	$this->name = "";			//名前
	$this->phone = "";			//電話番号
	$this->email = "";			//Eメール
	$this->positionid = "";		//役割管理用ID
	$this->colorid = "";		//表示色管理用ID
	$this->execute = "";		//処理種別

	}

	/*====================================================================================
	 *概要：
	 *	setter関数
	 *機能説明：
	 *	値をフィールド変数に格納
	 *引数：
	 *	各種格納する値
	 *戻り値：
	 *	なし
	 *備考：
	 *	作成日)	2015/8/26
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

		//入力ユーザーID
		public function setUserid($param)
		{
			$this->userid = $param;
		}

		//入力パスワード
		public function setPassword($param)
		{
			$this->password = $param;
		}

		//入力確認用パスワード
		public function setCheckPass($param)
		{
			$this->checkPass = $param;
		}

		//入力権限
		public function setAuthority($param)
		{
			$this->authority = $param;
		}

		//

		//処理種別
		public function setExecute($param)
		{
			$this->execute = $param;
		}

	/*====================================================================================
	 *概要：
	 *	getter関数
	 *機能説明：
	 *	値をフィールド変数から取得
	 *引数：
	 *	なし
	 *戻り値：
	 *	各種格納した値
	 *備考：
	 *	作成日)	2015/7/22
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */
		//入力ISBN番号
		public function getIsbn()
		{
			return $this->isbn;
		}

		//入力タイトル
		public function getTitle()
		{
			return $this->title;
		}

		//入力価格
		public function getPrice()
		{
			return $this->price;
		}

		//処理種別
		public function getExecute()
		{
			return $this->execute;
		}

	/*====================================================================================
	 *概要：
	 *	getForm関数
	 *機能説明：
	 *	フォームに入力された値を受け取る
	 *引数：
	 *	フォーム入力された値
	 *戻り値：
	 *	なし
	 *備考：
	 *	作成日)	2015/7/22
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

		//フォーム入力からの数値受け取り関数
		public function getForm(){

			//ユーザー入力ISBN番号
			if(isset($_POST["isbn"]))
			{
				$this->isbn = $_POST["isbn"];
			}

			//ユーザー入力タイトル
			if(isset($_POST["title"]))
			{
				$this->title = $_POST["title"];
			}

			//ユーザー入力価格
			if(isset($_POST["price"]))
			{
				$this->price = $_POST["price"];
			}

			//処理種別
			if(isset($_POST["execute"]))
			{
				$this->execute = $_POST["execute"];
			}

		}

	/*====================================================================================
	 *概要：
	 *	processing
	 *機能説明：
	 *	全体の処理判定を行う
	 *引数：
	 *	なし
	 *戻り値：
	 *	なし
	 *備考：
	 *	作成日)	2015/7/22
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

		public function processing($db)
		{
			//画面遷移のチェック
			if($this->execute == "insert"){	//検索ボタン押下時

			// 各種エラーチェック //

				//エラーメッセージの初期化
				$errMsg = "";

				//入力ISBNが登録済みかチェック
				if($this->searchIsbn($db))
				{
					$errMsg = "入力ISBNは既に登録済みの為、書籍登録処理は行えませんでした。<br>\n";
					callErrorPage($errMsg,"list");
					exit;
				}

				//エラーが無ければ登録処理を行う
				$this->insert($db);

			}else{	//初期画面&全件表示ボタン押下時

			}
		}

	/*====================================================================================
	 *概要：
	 *	searchIsbn
	 *機能説明：
	 *	プロパティ変数の$isbnで書籍情報を検索し、データの取得の有無によって戻り値を返す。
	 *引数：
	 *	データベース情報
	 *戻り値：
	 *	true(データが取得できた場合)/false（データが取得できなかった場合）
	 *備考：
	 *	作成日)	2015/7/22
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

		private function searchIsbn($db){

			//MySQL文の用意
			$sql = "SELECT * FROM bookinfo WHERE isbn = '{$this->isbn}'";

			//SQL文の発行
			$result = mysqli_query($db,$sql);

			//検索結果の件数を取得
			$rows = mysqli_num_rows($result);

			//検索結果の開放
			mysqli_free_result($result);

			//検索結果によって、trueかfalseを返す
			if($rows > 0){

				return true;

			}else{

				return false;

			}

		}

	/*====================================================================================
	 *概要：
	 *	insert
	 *機能説明：
	 *	$isbn,$title,$priceに入力されたデータを登録する。
	 *引数：
	 *	データベース情報
	 *戻り値：
	 *	なし
	 *備考：
	 *	作成日)	2015/7/22
	 *	作成者)	水島創太
	 *	説明）
	 *	更新日)
	 *	更新者)
	 *	変更)
	  ====================================================================================
	 */

		private function insert($db){

			//MySQL文の生成
			$sql = "INSERT INTO bookinfo VALUES('{$this->isbn}','{$this->title}',{$this->price})";

			//SQL文の発行
			$result = mysqli_query($db,$sql);
		}
}
?>
